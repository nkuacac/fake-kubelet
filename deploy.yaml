---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fake-kubelet
  namespace: kube-system
  labels:
    app: fake-kubelet
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fake-kubelet
  labels:
    app: fake-kubelet
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - watch
      - list
      - create
      - get
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - watch
      - list
      - delete
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/status
    verbs:
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fake-kubelet
  labels:
    app: fake-kubelet
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fake-kubelet
subjects:
  - kind: ServiceAccount
    name: fake-kubelet
    namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fake-kubelet
  namespace: kube-system
  labels:
    app: fake-kubelet
data:
  pod_status_template: |-
    {{ $startTime := .metadata.creationTimestamp }}
    conditions:
    - lastTransitionTime: {{ $startTime }}
      status: "True"
      type: Initialized
    - lastTransitionTime: {{ $startTime }}
      status: "True"
      type: Ready
    - lastTransitionTime: {{ $startTime }}
      status: "True"
      type: ContainersReady
    - lastTransitionTime: {{ $startTime }}
      status: "True"
      type: PodScheduled
    {{ range .spec.readinessGates }}
    - lastTransitionTime: {{ $startTime }}
      status: "True"
      type: {{ .conditionType }}
    {{ end }}
    {{ if .spec.containers }}
    containerStatuses:
    {{ range .spec.containers }}
    - image: {{ .image }}
      name: {{ .name }}
      ready: true
      restartCount: 0
      state:
        running:
          startedAt: {{ $startTime }}
    {{ end }}
    {{ end }}
    {{ if .spec.initContainers }}
    initContainerStatuses:
    {{ range .spec.initContainers }}
    - image: {{ .image }}
      name: {{ .name }}
      ready: true
      restartCount: 0
      state:
        terminated:
          exitCode: 0
          finishedAt: {{ $startTime }}
          reason: Completed
          startedAt: {{ $startTime }}
    {{ end }}
    {{ end }}
    phase: Running
    startTime: {{ $startTime }}
    hostIP: {{ if .status.hostIP }} {{ .status.hostIP }} {{ else }} {{ NodeIP }} {{ end }}
    podIP: {{ if .status.podIP }} {{ .status.podIP }} {{ else }} {{ PodIP }} {{ end }}
  node_template: |-
    apiVersion: v1
    kind: Node
    metadata:
      annotations:
        node.alpha.kubernetes.io/ttl: "0"
      labels:
        app: fake-kubelet
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
        kubernetes.io/arch: amd64
        kubernetes.io/hostname: {{ .metadata.name }}
        kubernetes.io/os: linux
        kubernetes.io/role: agent
        node-role.kubernetes.io/agent: ""
        type: fake-kubelet
      name: {{ .metadata.name }}
    spec:
      taints:
        - effect: NoSchedule
          key: fake-kubelet/provider
          value: fake
  node_heartbeat_template: |-
    conditions:
    - lastHeartbeatTime: {{ Now }}
      lastTransitionTime: {{ StartTime }}
      message: kubelet is ready.
      reason: KubeletReady
      status: "True"
      type: Ready
    - lastHeartbeatTime: {{ Now }}
      lastTransitionTime: {{ StartTime }}
      message: kubelet has sufficient disk space available
      reason: KubeletHasSufficientDisk
      status: "False"
      type: OutOfDisk
    - lastHeartbeatTime: {{ Now }}
      lastTransitionTime: {{ StartTime }}
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: {{ Now }}
      lastTransitionTime: {{ StartTime }}
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: {{ Now }}
      lastTransitionTime: {{ StartTime }}
      message: RouteController created a route
      reason: RouteCreated
      status: "False"
      type: NetworkUnavailable
  node_initialization_template: |-
    {{ if not .status.addresses }}
    addresses:
    - address: {{ NodeIP }}
      type: InternalIP
    {{ end }}
    {{ if not .status.allocatable }}
    allocatable:
      cpu: 1k
      memory: 1Ti
      pods: 1M
    {{ end }}
    {{ if not .status.capacity }}
    capacity:
      cpu: 1k
      memory: 1Ti
      pods: 1M
    {{ end }}
    {{ if not .status.daemonEndpoints }}
    daemonEndpoints:
      kubeletEndpoint:
        Port: 0
    {{ end }}
    {{ if not .status.nodeInfo }}
    nodeInfo:
      architecture: amd64
      bootID: ""
      containerRuntimeVersion: ""
      kernelVersion: ""
      kubeProxyVersion: ""
      kubeletVersion: fake
      machineID: ""
      operatingSystem: Linux
      osImage: ""
      systemUUID: ""
    {{ end }}
    phase: Running
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fake-kubelet
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fake-kubelet
  template:
    metadata:
      name: fake-kubelet
      namespace: kube-system
      labels:
        app: fake-kubelet
    spec:
      containers:
        - name: fake-kubelet
          image: ghcr.io/wzshiming/fake-kubelet/fake-kubelet:v0.3.5
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              value: "" # This is to specify a single Node, use GENERATE_NODE_NAME and GENERATE_REPLICAS to generate multiple nodes
            - name: GENERATE_NODE_NAME
              value: fake-
            - name: GENERATE_REPLICAS
              value: "5"
            - name: CIDR
              value: 10.0.0.1/24
            - name: HEALTH_ADDRESS
              value: :8080
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_STATUS_TEMPLATE
              valueFrom:
                configMapKeyRef:
                  name: fake-kubelet
                  key: pod_status_template
            - name: NODE_TEMPLATE
              valueFrom:
                configMapKeyRef:
                  name: fake-kubelet
                  key: node_template
            - name: NODE_HEARTBEAT_TEMPLATE
              valueFrom:
                configMapKeyRef:
                  name: fake-kubelet
                  key: node_heartbeat_template
            - name: NODE_INITIALIZATION_TEMPLATE
              valueFrom:
                configMapKeyRef:
                  name: fake-kubelet
                  key: node_initialization_template
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 2
            timeoutSeconds: 2
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 2
            timeoutSeconds: 2
            periodSeconds: 10
            failureThreshold: 3
      serviceAccount: fake-kubelet
      serviceAccountName: fake-kubelet
      restartPolicy: Always
---
